#!/usr/bin/env bash
set -euo pipefail
# clear -x

VALID_URL_REGEX='^(https://|ssh://aur@)aur.archlinux.org/[^.]+.git$'
if [[ $1 =~ $VALID_URL_REGEX ]]
then
    # It's a URL
    # Try to reach the URL over SSH
    if git ls-remote --exit-code $1 &> /dev/null
    then
        # URL is an AUR repository and reachable over SSH
        VALID_PACKAGE_URL=$1
    else
        exit 1
    fi
else
    # It's a package name, try to automatically resolve it

    PACKAGE_BASE=`curl -s "https://aur.archlinux.org/rpc?v=5&type=multiinfo&arg[]=$1" | jq -r '.results[].PackageBase'`

    # Try to reach the URL over SSH
    if git ls-remote --exit-code ssh://aur@aur.archlinux.org/$PACKAGE_BASE.git &> /dev/null
    then
        # URL is an AUR repository and reachable over SSH
        VALID_PACKAGE_URL="ssh://aur@aur.archlinux.org/$PACKAGE_BASE.git"
    else
        # Try reaching over HTTPS 
        if git ls-remote --exit-code https://aur.archlinux.org/$PACKAGE_BASE.git &> /dev/null
        then
            VALID_PACKAGE_URL="https://aur.archlinux.org/$PACKAGE_BASE.git"
        else
            echo -e "\e[1;32mPackage not found in the AUR, aborting...\e[m"
            exit 1
        fi
    fi
fi

PACKAGE_NAME=$(echo $VALID_PACKAGE_URL | sed 's:.*/::' | sed 's/.git//')
echo -e "\e[1;32mInstalling $PACKAGE_NAME ($VALID_PACKAGE_URL)\e[m"
DOWNLOAD_DIR=$(echo "$HOME/Downloads/aur_packages/$PACKAGE_NAME" | sed -e "s/\./-/g")
cd $HOME/Downloads/aur_packages
if [[ -d $DOWNLOAD_DIR ]]; then
  cd $DOWNLOAD_DIR
  git pull &> /dev/null
else
  git clone $VALID_PACKAGE_URL &> /dev/null
fi
bat --pager='never' $DOWNLOAD_DIR/PKGBUILD
echo -ne "\e[1;32mDo you want to install? (y/N) \e[m"
read USERIN
if [ "$USERIN" == "y" ]; then
  echo -e "\e[1;32mInstalling\e[m"
  cd $DOWNLOAD_DIR
  makepkg -fris
else
  echo -e "\e[1;32mAborting\e[m"
  exit 1
fi

